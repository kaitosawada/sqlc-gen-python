# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.28.0
# source: query.sql
from typing import AsyncIterator, Iterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from db import models


CREATE_BOOK = """-- name: create_book \\:one
INSERT INTO books (
          title, status
) VALUES (
  :p1, :p2
) RETURNING id, title, status
"""


DELETE_BOOK = """-- name: delete_book \\:exec
DELETE FROM books
WHERE id = :p1
"""


GET_BOOK = """-- name: get_book \\:one
SELECT id, title, status FROM books
WHERE id = :p1 LIMIT 1
"""


LIST_BOOKS = """-- name: list_books \\:many
SELECT id, title, status FROM books
ORDER BY title
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_book(self, *, title: str, status: Optional[models.BookStatus]) -> Optional[models.Book]:
        row = self._conn.execute(sqlalchemy.text(CREATE_BOOK), {"p1": title, "p2": status}).first()
        if row is None:
            return None
        return models.Book(
            id=row[0],
            title=row[1],
            status=row[2],
        )

    def delete_book(self, *, id: int) -> None:
        self._conn.execute(sqlalchemy.text(DELETE_BOOK), {"p1": id})

    def get_book(self, *, id: int) -> Optional[models.Book]:
        row = self._conn.execute(sqlalchemy.text(GET_BOOK), {"p1": id}).first()
        if row is None:
            return None
        return models.Book(
            id=row[0],
            title=row[1],
            status=row[2],
        )

    def list_books(self) -> Iterator[models.Book]:
        result = self._conn.execute(sqlalchemy.text(LIST_BOOKS))
        for row in result:
            yield models.Book(
                id=row[0],
                title=row[1],
                status=row[2],
            )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_book(self, *, title: str, status: Optional[models.BookStatus]) -> Optional[models.Book]:
        result = await self._conn.execute(sqlalchemy.text(CREATE_BOOK), {"p1": title, "p2": status})
        row = result.first()
        if row is None:
            return None
        return models.Book(
            id=row[0],
            title=row[1],
            status=row[2],
        )

    async def delete_book(self, *, id: int) -> None:
        await self._conn.execute(sqlalchemy.text(DELETE_BOOK), {"p1": id})

    async def get_book(self, *, id: int) -> Optional[models.Book]:
        result = await self._conn.execute(sqlalchemy.text(GET_BOOK), {"p1": id})
        row = result.first()
        if row is None:
            return None
        return models.Book(
            id=row[0],
            title=row[1],
            status=row[2],
        )

    async def list_books(self) -> AsyncIterator[models.Book]:
        result = await self._conn.stream(sqlalchemy.text(LIST_BOOKS))
        async for row in result:
            yield models.Book(
                id=row[0],
                title=row[1],
                status=row[2],
            )
